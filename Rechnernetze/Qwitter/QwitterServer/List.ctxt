#BlueJ class context
comment0.params=
comment0.target=List()
comment0.text=\n\ Eine\ leere\ Liste\ wird\ erzeugt.\n
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\n\ Die\ Anfrage\ liefert\ den\ Wert\ true,\ wenn\ die\ Liste\ keine\ Objekte\ enthaelt,\n\ sonst\ liefert\ sie\ den\ Wert\ false.\n\ \n\ @return\ true,\ wenn\ die\ Liste\ leer\ ist,\ sonst\ false\n
comment10.params=pList
comment10.target=void\ concat(List)
comment10.text=\n\ Falls\ es\ sich\ bei\ der\ Liste\ und\ pList\ um\ dasselbe\ Objekt\ handelt,\n\ pList\ null\ oder\ eine\ leere\ Liste\ ist,\ geschieht\ nichts.<br\ />\n\ Ansonsten\ wird\ die\ Liste\ pList\ an\ die\ aktuelle\ Liste\ angehaengt.\n\ Anschliessend\ wird\ pList\ eine\ leere\ Liste.\ Das\ aktuelle\ Objekt\ bleibt\n\ unveraendert.\ Insbesondere\ bleibt\ hasAccess\ identisch.\n\ \n\ @param\ pList\n\ \ \ \ \ \ \ \ \ \ \ \ die\ am\ Ende\ anzuhaengende\ Liste\ vom\ Typ\ List<ContentType>\n
comment11.params=
comment11.target=void\ remove()
comment11.text=\n\ Wenn\ die\ Liste\ leer\ ist\ oder\ es\ kein\ aktuelles\ Objekt\ gibt\ (hasAccess()\n\ \=\=\ false),\ geschieht\ nichts.<br\ />\n\ Falls\ es\ ein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ true),\ wird\ das\n\ aktuelle\ Objekt\ geloescht\ und\ das\ Objekt\ hinter\ dem\ geloeschten\ Objekt\n\ wird\ zum\ aktuellen\ Objekt.\ <br\ />\n\ Wird\ das\ Objekt,\ das\ am\ Ende\ der\ Liste\ steht,\ geloescht,\ gibt\ es\ kein\n\ aktuelles\ Objekt\ mehr.\n
comment12.params=pNode
comment12.target=List.ListNode\ getPrevious(List.ListNode)
comment12.text=\n\ Liefert\ den\ Vorgaengerknoten\ des\ Knotens\ pNode.\ Ist\ die\ Liste\ leer,\ pNode\n\ \=\=\ null,\ pNode\ nicht\ in\ der\ Liste\ oder\ pNode\ der\ erste\ Knoten\ der\ Liste,\n\ wird\ null\ zurueckgegeben.\n\n\ @param\ pNode\n\ \ \ \ \ \ \ \ \ der\ Knoten,\ dessen\ Vorgaenger\ zurueckgegeben\ werden\ soll\n\ @return\ der\ Vorgaenger\ des\ Knotens\ pNode\ oder\ null,\ falls\ die\ Liste\ leer\ ist,\n\ \ \ \ \ \ \ \ \ pNode\ \=\=\ null\ ist,\ pNode\ nicht\ in\ der\ Liste\ ist\ oder\ pNode\ der\ erste\ Knoten\n\ \ \ \ \ \ \ \ \ der\ Liste\ ist\n
comment2.params=
comment2.target=boolean\ hasAccess()
comment2.text=\n\ Die\ Anfrage\ liefert\ den\ Wert\ true,\ wenn\ es\ ein\ aktuelles\ Objekt\ gibt,\n\ sonst\ liefert\ sie\ den\ Wert\ false.\n\ \n\ @return\ true,\ falls\ Zugriff\ moeglich,\ sonst\ false\n
comment3.params=
comment3.target=void\ next()
comment3.text=\n\ Falls\ die\ Liste\ nicht\ leer\ ist,\ es\ ein\ aktuelles\ Objekt\ gibt\ und\ dieses\n\ nicht\ das\ letzte\ Objekt\ der\ Liste\ ist,\ wird\ das\ dem\ aktuellen\ Objekt\ in\n\ der\ Liste\ folgende\ Objekt\ zum\ aktuellen\ Objekt,\ andernfalls\ gibt\ es\ nach\n\ Ausfuehrung\ des\ Auftrags\ kein\ aktuelles\ Objekt,\ d.h.\ hasAccess()\ liefert\n\ den\ Wert\ false.\n
comment4.params=
comment4.target=void\ toFirst()
comment4.text=\n\ Falls\ die\ Liste\ nicht\ leer\ ist,\ wird\ das\ erste\ Objekt\ der\ Liste\ aktuelles\n\ Objekt.\ Ist\ die\ Liste\ leer,\ geschieht\ nichts.\n
comment5.params=
comment5.target=void\ toLast()
comment5.text=\n\ Falls\ die\ Liste\ nicht\ leer\ ist,\ wird\ das\ letzte\ Objekt\ der\ Liste\n\ aktuelles\ Objekt.\ Ist\ die\ Liste\ leer,\ geschieht\ nichts.\n
comment6.params=
comment6.target=java.lang.Object\ getContent()
comment6.text=\n\ Falls\ es\ ein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ true),\ wird\ das\n\ aktuelle\ Objekt\ zurueckgegeben,\ andernfalls\ (hasAccess()\ \=\=\ false)\ gibt\n\ die\ Anfrage\ den\ Wert\ null\ zurueck.\n\ \n\ @return\ das\ aktuelle\ Objekt\ (vom\ Typ\ ContentType)\ oder\ null,\ wenn\ es\n\ \ \ \ \ \ \ \ \ kein\ aktuelles\ Objekt\ gibt\n
comment7.params=pContent
comment7.target=void\ setContent(java.lang.Object)
comment7.text=\n\ Falls\ es\ ein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ true)\ und\ pContent\n\ ungleich\ null\ ist,\ wird\ das\ aktuelle\ Objekt\ durch\ pContent\ ersetzt.\ Sonst\n\ geschieht\ nichts.\n\ \n\ @param\ pContent\n\ \ \ \ \ \ \ \ \ \ \ \ das\ zu\ schreibende\ Objekt\ vom\ Typ\ ContentType\n
comment8.params=pContent
comment8.target=void\ insert(java.lang.Object)
comment8.text=\n\ Falls\ es\ ein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ true),\ wird\ ein\ neues\n\ Objekt\ vor\ dem\ aktuellen\ Objekt\ in\ die\ Liste\ eingefuegt.\ Das\ aktuelle\n\ Objekt\ bleibt\ unveraendert.\ <br\ />\n\ Wenn\ die\ Liste\ leer\ ist,\ wird\ pContent\ in\ die\ Liste\ eingefuegt\ und\ es\n\ gibt\ weiterhin\ kein\ aktuelles\ Objekt\ (hasAccess()\ \=\=\ false).\ <br\ />\n\ Falls\ es\ kein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ false)\ und\ die\ Liste\n\ nicht\ leer\ ist\ oder\ pContent\ gleich\ null\ ist,\ geschieht\ nichts.\n\ \n\ @param\ pContent\n\ \ \ \ \ \ \ \ \ \ \ \ das\ einzufuegende\ Objekt\ vom\ Typ\ ContentType\n
comment9.params=pContent
comment9.target=void\ append(java.lang.Object)
comment9.text=\n\ Falls\ pContent\ gleich\ null\ ist,\ geschieht\ nichts.<br\ />\n\ Ansonsten\ wird\ ein\ neues\ Objekt\ pContent\ am\ Ende\ der\ Liste\ eingefuegt.\n\ Das\ aktuelle\ Objekt\ bleibt\ unveraendert.\ <br\ />\n\ Wenn\ die\ Liste\ leer\ ist,\ wird\ das\ Objekt\ pContent\ in\ die\ Liste\ eingefuegt\n\ und\ es\ gibt\ weiterhin\ kein\ aktuelles\ Objekt\ (hasAccess()\ \=\=\ false).\n\ \n\ @param\ pContent\n\ \ \ \ \ \ \ \ \ \ \ \ das\ anzuhaengende\ Objekt\ vom\ Typ\ ContentType\n
numComments=13
