#BlueJ class context
comment0.params=
comment0.target=BinarySearchTree()
comment0.text=\n\ Der\ Konstruktor\ erzeugt\ einen\ leeren\ Suchbaum.\n
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\n\ Diese\ Anfrage\ liefert\ den\ Wahrheitswert\ true,\ wenn\ der\ Suchbaum\ leer\ ist,\n\ sonst\ liefert\ sie\ den\ Wert\ false.\n\ \n\ @return\ true,\ wenn\ der\ binaere\ Suchbaum\ leer\ ist,\ sonst\ false\n\ \n
comment10.params=
comment10.target=BinarySearchTree.BSTNode\ getNodeOfRightSuccessor()
comment2.params=pContent
comment2.target=void\ insert(ComparableContent)
comment2.text=\n\ Falls\ der\ Parameter\ null\ ist,\ geschieht\ nichts.<br\ />\n\ Falls\ ein\ bezueglich\ der\ verwendeten\ Vergleichsmethode\ isEqual\ mit\n\ pContent\ uebereinstimmendes\ Objekt\ im\ geordneten\ binaeren\ Suchbau\n\ enthalten\ ist,\ passiert\ nichts.\ <br\ />\n\ Achtung\:\ hier\ wird\ davon\ ausgegangen,\ dass\ isEqual\ genau\ dann\ true\n\ liefert,\ wenn\ isLess\ und\ isGreater\ false\ liefern.\ <br\ />\n\ Andernfalls\ (isLess\ oder\ isGreater)\ wird\ das\ Objekt\ pContent\ entsprechend\n\ der\ vorgegebenen\ Ordnungsrelation\ in\ den\ BinarySearchTree\ eingeordnet.\n\ \n\ @param\ pContent\n\ \ \ \ \ \ \ \ \ \ \ \ einzufuegendes\ Objekt\ vom\ Typ\ ContentType\n\ \ \ \ \ \ \ \ \ \ \ \ \n
comment3.params=
comment3.target=BinarySearchTree\ getLeftTree()
comment3.text=\n\ Diese\ Anfrage\ liefert\ den\ linken\ Teilbaum\ des\ binaeren\ Suchbaumes.\ <br\ />\n\ Wenn\ er\ leer\ ist,\ wird\ null\ zurueckgegeben.\n\ \n\ @return\ den\ linken\ Teilbaum\ (Objekt\ vom\ Typ\ BinarySearchTree<ContentType>)\ \n\ \ \ \ \ \ \ \ \ bzw.\ null,\ wenn\ der\ Suchbaum\ leer\ ist\n\ \ \ \ \ \ \ \ \ \n
comment4.params=
comment4.target=ComparableContent\ getContent()
comment4.text=\n\ Diese\ Anfrage\ liefert\ das\ Inhaltsobjekt\ des\ Suchbaumes.\ Wenn\ der\ Suchbaum\n\ leer\ ist,\ wird\ null\ zurueckgegeben.\n\ \n\ @return\ das\ Inhaltsobjekt\ vom\ Typ\ ContentType\ bzw.\ null,\ wenn\ der\ aktuelle\n\ \ \ \ \ \ \ \ \ Suchbaum\ leer\ ist\n\ \ \ \ \ \ \ \ \ \n
comment5.params=
comment5.target=BinarySearchTree\ getRightTree()
comment5.text=\n\ Diese\ Anfrage\ liefert\ den\ rechten\ Teilbaum\ des\ binaeren\ Suchbaumes.\ <br\ />\n\ Wenn\ er\ leer\ ist,\ wird\ null\ zurueckgegeben.\n\ \n\ @return\ den\ rechten\ Teilbaum\ (Objekt\ vom\ Typ\ BinarySearchTree<ContentType>)\ \n\ \ \ \ \ \ \ \ \ bzw.\ null,\ wenn\ der\ aktuelle\ Suchbaum\ leer\ ist\n\ \ \ \ \ \ \ \ \ \n
comment6.params=pContent
comment6.target=void\ remove(ComparableContent)
comment6.text=\n\ Falls\ ein\ bezueglich\ der\ verwendeten\ Vergleichsmethode\ mit\n\ pContent\ uebereinstimmendes\ Objekt\ im\ binaeren\ Suchbaum\ enthalten\n\ ist,\ wird\ dieses\ entfernt.\ Falls\ der\ Parameter\ null\ ist,\ aendert\ sich\n\ nichts.\n\ \n\ @param\ pContent\n\ \ \ \ \ \ \ \ \ \ \ \ zu\ entfernendes\ Objekt\ vom\ Typ\ ContentType\n\ \ \ \ \ \ \ \ \ \ \ \ \n
comment7.params=pContent
comment7.target=ComparableContent\ search(ComparableContent)
comment7.text=\n\ Falls\ ein\ bezueglich\ der\ verwendeten\ Vergleichsmethode\ isEqual\ mit\n\ pContent\ uebereinstimmendes\ Objekt\ im\ binaeren\ Suchbaum\ enthalten\ ist,\n\ liefert\ die\ Anfrage\ dieses,\ ansonsten\ wird\ null\ zurueckgegeben.\ <br\ />\n\ Falls\ der\ Parameter\ null\ ist,\ wird\ null\ zurueckgegeben.\n\ \n\ @param\ pContent\n\ \ \ \ \ \ \ \ \ \ \ \ zu\ suchendes\ Objekt\ vom\ Typ\ ContentType\n\ @return\ das\ gefundene\ Objekt\ vom\ Typ\ ContentType,\ bei\ erfolgloser\ Suche\ null\n\ \n
comment8.params=
comment8.target=BinarySearchTree\ ancestorOfSmallRight()
comment8.text=\n\ Die\ Methode\ liefert\ denjenigen\ Baum,\ dessen\ linker\ Nachfolger\ keinen\ linken\n\ Nachfolger\ mehr\ hat.\ Es\ ist\ also\ spaeter\ moeglich,\ in\ einem\ Baum\ im\n\ rechten\ Nachfolger\ den\ Vorgaenger\ des\ linkesten\ Nachfolgers\ zu\ finden.\n\ \n
comment9.params=
comment9.target=BinarySearchTree.BSTNode\ getNodeOfLeftSuccessor()
numComments=11
